name: 'Spin-Up Docker Compose'
author: yu-ichiro
description: 'An action to spin up docker compose environment within GitHub Actions.'
branding:
  icon: box
  color: blue
inputs:
  file:
    description: 'the file to parse targets from, normally compose.yml. supported extensions: yml, json'
    type: string
    required: true
  cache-key:
    description: 'the cache key to use for saving build data. defaults to "default"'
    type: string
    required: false
    default: 'default'
  shared:
    description: 'whether to use local registry to share built images. this enables `registry` and `localhost`. defaults to false'
    type: boolean
    required: false
    default: false
  registry:
    description: 'whether to use a local registry or not. defaults to false'
    type: boolean
    required: false
    default: false
  localhost:
    description: 'whether to replace targets registry to localhost or not. registry must be true to use this. defaults to false'
    type: boolean
    required: false
    default: false
  pull:
    description: 'whether to pull targets images. defaults to false'
    type: boolean
    required: false
    default: false
  pull-opts:
    description: 'options to pass to docker compose pull. pull must be true to use this. defaults to ""'
    type: string
    required: false
    default: ""
  bake:
    description: 'whether to bake targets. defaults to false'
    type: boolean
    required: false
    default: false
  push:
    description: 'whether to push targets images after baking. bake must be true to use this. defaults to false'
    type: boolean
    required: false
    default: false
  bake-opts:
    description: 'options to pass to docker buildx bake. bake must be true to use this. defaults to ""'
    type: string
    required: false
    default: ""
  up:
    description: 'whether to boot up docker compose. defaults to true'
    type: boolean
    required: false
    default: true
  up-opts:
    description: 'options to pass to docker compose up. up must be true to use this. defaults to "-d"'
    type: string
    required: false
    default: "-d"
  token:
    description: 'GitHub token to push images to GitHub Containers Registry. defaults to value of github.token'
    type: string
    required: false
    default: '${{ github.token }}'
  dry-run:
    description: '[debugging] dry-run the action'
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - if: fromJson(inputs.bake)
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ inputs.cache-key }}-buildx-cache-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ inputs.cache-key }}-buildx-cache-${{ github.ref }}
          ${{ inputs.cache-key }}-buildx-cache-
    - if: fromJson(inputs.bake)
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host
    - if: fromJson(inputs.registry) || fromJson(inputs.shared)
      uses: actions/cache@v3
      with:
        path: /tmp/docker-registry
        key: ${{ inputs.cache-key }}-docker-registry-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ inputs.cache-key }}-docker-registry-${{ github.ref }}
          ${{ inputs.cache-key }}-docker-registry-
    - if: fromJson(inputs.registry) || fromJson(inputs.shared)
      shell: bash
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        $prefix docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2; \
        $prefix npx wait-on tcp:5000
    - if: fromJson(inputs.bake) || fromJson(inputs.localhost) || fromJson(inputs.shared)
      shell: bash
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        $prefix pip install -r ${{ github.action_path }}/requirements.txt
    - if: (fromJson(inputs.registry) && fromJson(inputs.localhost)) || fromJson(inputs.shared)
      shell: bash
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        $prefix python ${{ github.action_path }}/convert.py localhost ${{ inputs.file }}
    - if: fromJson(inputs.pull)
      shell: bash
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        $prefix docker compose -f "${{ inputs.file }}" pull ${{ inputs.pull-opts }}
    - if: fromJson(inputs.bake)
      shell: bash
      env:
        GITHUB_TOKEN: '${{ inputs.token }}'
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        [ "${{ inputs.push }}" = "true" ]&&action="--push"||action="--load"; \
        $prefix python ${{ github.action_path }}/convert.py add_image_tag ${{ inputs.file }}; \
        $prefix cd $(dirname ${{ inputs.file }}); \
        $prefix docker buildx bake \
            --builder="${{ steps.buildx.outputs.name }}" \
            --set='*.cache-from=type=local,src=/tmp/.buildx-cache' \
            --set='*.cache-to=type=local,dest=/tmp/.buildx-cache' \
            $action \
            -f "$(basename ${{ inputs.file }})" ${{ inputs.bake-opts }}; \
        $prefix docker image ls
    - if: fromJson(inputs.up)
      shell: bash
      run: |
        [ "${{ inputs.dry-run }}" = "true" ]&&prefix="echo"; \
        $prefix docker compose -f "${{ inputs.file }}" up ${{ inputs.up-opts }}
